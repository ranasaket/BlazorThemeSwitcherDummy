@page "/demo"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Cards;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;



<div class="container-fluid py-8">
    <div class="row justify-content-center">
        <div class="col-xl-5 xl-lg-10 col-md-5 mx-auto">
            <div class="card mt-2 rounded-5">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-info shadow-primary border-radius-lg py-3 pe-1 text-center py-4">
                        <h4 class="font-weight-bolder text-white mt-1">Welcome Back</h4>
                    </div>
                </div>

                <div class="card-body pb-2">
                    <EditForm Model="@loginmodal" OnValidSubmit="SaveAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group input-group-outline mb-3">
                            @*<SfTextBox CssClass="e-outline" @bind-Value="@loginmodal.Email" Placeholder="Email Address" Type="InputType.Email"></SfTextBox>*@
                            <input type="text" @bind-value="@loginmodal.Email" Placeholder="Email Address"></input>
                            <ValidationMessage For="@(() => loginmodal.Email)" />
                        </div>
                        <div class="form-group input-group-outline mb-3">
                            <SfTextBox CssClass="e-outline" @bind-Value="@loginmodal.Password" Placeholder="Passsword" Type="InputType.Password"></SfTextBox>
                            <ValidationMessage For="@(() => loginmodal.Password)" />
                        </div>

                        <div class="d-flex align-items-center">
                            <div class="text-start">

                                <SfCheckBox @bind-Checked="@loginmodal.isCheckked"></SfCheckBox>
                                <ValidationMessage For="@(() => loginmodal.isCheckked)" />
                                <label class="font-weight-normal text-dark mb-0" for="flexCheckDefault">
                                    Remember me
                                </label>
                            </div>
                            <a href="/forgetpassword" class="text-xs font-weight-bold ms-auto">Forgot password</a>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary w-100">Sign In</button>
                            <button type="button" class="btn btn-secondary shadow-secondary w-100   rounded-5">
                                <span class="btn-inner--icon m-1">
                                    <img class="w-8" src="/css/google-logo.svg" alt="google-logo" />
                                </span>

                                <span class="btn-inner--text">Sign in with Google</span>
                            </button>
                        </div>
                    </EditForm>

                </div>
                <div class="card-footer text-center pt-0 px-sm-1">
                    <p class="mb-1 mx-auto">
                        Don't have an account?
                        <a href="/signup" class="text-primary text-info font-weight-bold">Sign up</a>
                    </p>
                </div>
            </div>
        </div>

        @if (IsLogInFailed)
        {
            <SfMessage Severity="MessageSeverity.Error">Email or Password is Invalid</SfMessage>
        }
    </div>
</div>

@code {

    private string Message = string.Empty;
    public LoginModal loginmodal { get; set; } = new LoginModal();
    public bool IsLogInFailed = false;

    private async Task SaveAsync()
    {
        if (String.IsNullOrEmpty(loginmodal.Email) || String.IsNullOrEmpty(loginmodal.Password))
        {
            Console.WriteLine("Cannot be null");
        }
        else
        {
            Console.WriteLine("login success");
        }
    }
    public class LoginModal
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        public bool isCheckked { get; set; }
    }
}